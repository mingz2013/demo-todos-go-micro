// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/todo/todo.proto

package go_micro_api_todos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/micro/go-api/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Todo service

type TodoService interface {
	Add(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Del(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Edit(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	List(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Detail(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
}

type todoService struct {
	c    client.Client
	name string
}

func NewTodoService(name string, c client.Client) TodoService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.api.todos"
	}
	return &todoService{
		c:    c,
		name: name,
	}
}

func (c *todoService) Add(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Todo.Add", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoService) Del(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Todo.Del", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoService) Edit(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Todo.Edit", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoService) List(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Todo.List", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoService) Detail(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Todo.Detail", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Todo service

type TodoHandler interface {
	Add(context.Context, *proto1.Request, *proto1.Response) error
	Del(context.Context, *proto1.Request, *proto1.Response) error
	Edit(context.Context, *proto1.Request, *proto1.Response) error
	List(context.Context, *proto1.Request, *proto1.Response) error
	Detail(context.Context, *proto1.Request, *proto1.Response) error
}

func RegisterTodoHandler(s server.Server, hdlr TodoHandler, opts ...server.HandlerOption) error {
	type todo interface {
		Add(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Del(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Edit(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		List(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		Detail(ctx context.Context, in *proto1.Request, out *proto1.Response) error
	}
	type Todo struct {
		todo
	}
	h := &todoHandler{hdlr}
	return s.Handle(s.NewHandler(&Todo{h}, opts...))
}

type todoHandler struct {
	TodoHandler
}

func (h *todoHandler) Add(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.TodoHandler.Add(ctx, in, out)
}

func (h *todoHandler) Del(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.TodoHandler.Del(ctx, in, out)
}

func (h *todoHandler) Edit(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.TodoHandler.Edit(ctx, in, out)
}

func (h *todoHandler) List(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.TodoHandler.List(ctx, in, out)
}

func (h *todoHandler) Detail(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.TodoHandler.Detail(ctx, in, out)
}
